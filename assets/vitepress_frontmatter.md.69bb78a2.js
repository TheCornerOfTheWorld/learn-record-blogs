import{_ as e,o as a,c as t,a as l}from"./app.5bb8cff5.js";const m=JSON.parse('{"title":"Frontmatter 配置","description":"","frontmatter":{},"headers":[{"level":2,"title":"title","slug":"title","link":"#title","children":[]},{"level":2,"title":"title Template","slug":"title-template","link":"#title-template","children":[]},{"level":2,"title":"description","slug":"description","link":"#description","children":[]},{"level":2,"title":"head","slug":"head","link":"#head","children":[]},{"level":2,"title":"lastUpdated","slug":"lastupdated","link":"#lastupdated","children":[]},{"level":2,"title":"layout","slug":"layout","link":"#layout","children":[]},{"level":2,"title":"hero","slug":"hero","link":"#hero","children":[]},{"level":2,"title":"features","slug":"features","link":"#features","children":[]},{"level":2,"title":"aside","slug":"aside","link":"#aside","children":[]},{"level":2,"title":"outline","slug":"outline","link":"#outline","children":[]}],"relativePath":"vitepress/frontmatter.md"}'),n={name:"vitepress/frontmatter.md"},s=l(`<h1 id="frontmatter-config" tabindex="-1">Frontmatter 配置 <a class="header-anchor" href="#frontmatter-config" aria-hidden="true">#</a></h1><p>Markdown 文件可以包含一个 YAML Frontmatter 。Frontmatter 必须在 Markdown 文件的顶部，并且被包裹在一对三短划线中间。下面是一个基本的示例：</p><div class="language-md"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"><span style="color:#F07178;">lang</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zh-CN</span></span>
<span class="line"><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">页面的标题</span></span>
<span class="line"><span style="color:#F07178;">description</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">页面的描述</span></span>
<span class="line"><span style="color:#A6ACCD;">---</span></span>
<span class="line"></span></code></pre></div><p>你可以通过 Frontmatter 来覆盖当前页面的 lang, title, description 等属性。因此，你可以把 Frontmatter 当作页面级作用域的配置。</p><h2 id="title" tabindex="-1">title <a class="header-anchor" href="#title" aria-hidden="true">#</a></h2><p>页面标题。它与 config.title 相同，并覆盖应用程序配置。</p><h2 id="title-template" tabindex="-1">title Template <a class="header-anchor" href="#title-template" aria-hidden="true">#</a></h2><p>标题的后缀。它与 config.titleTemplate 相同，并覆盖应用程序配置。</p><h2 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-hidden="true">#</a></h2><p>页面的说明。它与 config.description 相同，并覆盖应用程序配置。</p><h2 id="head" tabindex="-1">head <a class="header-anchor" href="#head" aria-hidden="true">#</a></h2><p>指定要注入的额外头标记：</p><h2 id="lastupdated" tabindex="-1">lastUpdated <a class="header-anchor" href="#lastupdated" aria-hidden="true">#</a></h2><p>是否在当前页面中显示上次更新的文本。</p><h2 id="layout" tabindex="-1">layout <a class="header-anchor" href="#layout" aria-hidden="true">#</a></h2><p>确定页面的布局。 doc-它将默认文档样式应用于 markdown 内容。 home-“主页”的特殊布局。您可以添加额外的选项，如英雄和功能，以快速创建漂亮的登录页面。 页面-行为类似于文档，但它对内容不应用样式。当您想要创建完全自定义的页面时非常有用。</p><h2 id="hero" tabindex="-1">hero <a class="header-anchor" href="#hero" aria-hidden="true">#</a></h2><p>此选项仅在布局设置为主页时生效。</p><h2 id="features" tabindex="-1">features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><p>此选项仅在布局设置为主页时生效。</p><h2 id="aside" tabindex="-1">aside <a class="header-anchor" href="#aside" aria-hidden="true">#</a></h2><p>如果希望不显示文档布局中的右侧组件，请将此选项设置为 false。</p><h2 id="outline" tabindex="-1">outline <a class="header-anchor" href="#outline" aria-hidden="true">#</a></h2><p>要为页面显示的大纲中的标题级别。它与 config.themeConfig.outline,相同，并覆盖主题配置。</p>`,24),i=[s];function r(d,o,p,h,c,u){return a(),t("div",null,i)}const _=e(n,[["render",r]]);export{m as __pageData,_ as default};
